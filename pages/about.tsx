import { ConnectButton, useConnectModal } from '@rainbow-me/rainbowkit';
import Head from 'next/head';
import DConnect from '../components/DConnect';
import DConnect2 from '../components/DConnect2';
import styles from '../styles/Home.module.css';
import { useAccount, useBalance, useDisconnect, useEnsName, useNetwork, useSigner, useSwitchNetwork } from 'wagmi'
import useMounted from '../hook/useMounted';
import { fetchBalance } from '@wagmi/core'
import { ReactElement, useEffect } from 'react';
import Layout from '../components/Layout';
const About = () => {
    const { data: signer } = useSigner();
    const isMounted = useMounted()
    const { disconnect } = useDisconnect()
    const { openConnectModal } = useConnectModal()
    const { address: account, connector: activeConnector, isConnecting, isDisconnected } = useAccount()
    console.log("🚀 ~ file: index.tsx:17 ~ isDisconnected:", isDisconnected)
    console.log("🚀 ~ file: index.tsx:17 ~ isConnecting:", isConnecting)
    const ensName = useEnsName({
        address: account,
        chainId: 1,
    })
    const { chain } = useNetwork()
    const { switchNetwork } = useSwitchNetwork()
    const { data, isError, isLoading } = useBalance({
        address: account,
    })
    useEffect(() => {
        const getBalance = async () => {
            if (account) {
                const balance = await fetchBalance({ address: account })
                console.log(balance);
            }
        }
        getBalance()
    }, [])
    const changeChain = () => {
        switchNetwork?.(137)
    }
    return (
        <div className={styles.container}>
            <Head>
                <title>RainbowKit App</title>
                <meta
                    name="description"
                    content="Generated by @rainbow-me/create-rainbowkit"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            {/* <DConnect isShow={true} /> */}
            {isMounted && <DConnect2 />}
            <button onClick={() => disconnect()}>注销</button>
            <span onClick={openConnectModal}>链接</span>
            {isMounted && <div>当前用户的ENS:{ensName.data}</div>}
            {isMounted && <div>当前链Id:{chain?.id}</div>}
            <button onClick={changeChain}>切换链</button>
            {isMounted && <div>当前用户余额：{data?.formatted}{data?.symbol}</div>}
            <div style={{ color: 'green' }}>chainStatus="full"</div>
            <br />
            <br />
            <ConnectButton label='我是自定义按钮文字' chainStatus="full" />
            <br />
            <br />
            <div style={{ color: 'green' }}>chainStatus="icon"</div>
            <br />
            <ConnectButton label='我是自定义按钮文字' chainStatus="icon" />
            <br />
            <br />
            <div style={{ color: 'green' }}>chainStatus="name"</div>
            <br />
            <ConnectButton label='我是自定义按钮文字' chainStatus="name" />
            <br />
            <br />
            <div style={{ color: 'green' }}>chainStatus="none"</div>
            <br />
            <ConnectButton label='我是自定义按钮文字' chainStatus="none" />
            <br />
            <br />
            <div style={{ color: 'green' }}>showBalance="none"</div>
            <br />
            <ConnectButton label='我是自定义按钮文字' chainStatus="none" showBalance={false} />
            <br />
            <br />
            <div style={{ color: 'green' }}>accountStatus="address"</div>
            <br />
            <ConnectButton label='我是自定义按钮文字' chainStatus="none" showBalance={false} accountStatus={"address"} />
            <br />
            <br />
            <div style={{ color: 'green' }}>accountStatus="avatar"</div>
            <br />
            <ConnectButton label='我是自定义按钮文字' chainStatus="none" showBalance={false} accountStatus={"avatar"} />
            <br />
            <br />
            <div style={{ color: 'green' }}>accountStatus="full"</div>
            <br />
            <ConnectButton label='我是自定义按钮文字' chainStatus="none" showBalance={false} accountStatus={"full"} />
            <br />
            <br />
            <DConnect isShow={true} />
            <br />
            <br />
        </div>
    );
};
About.getLayout = function getLayout(page: ReactElement) {
    return (
        <Layout>
            <>{page}</>
        </Layout>
    )
}
export default About;
